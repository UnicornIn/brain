name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_SSH_KEY }}" > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem

      - name: Deploy App to EC2
        shell: bash
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws_key.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} 'bash -s' <<'ENDSSH'
            set -e
            PROJECT_PATH="/home/ubuntu/brain/Backend"
            APP_DOMAIN="https://staging-brain.rizosfelices.co"
            PM2_PROCESS_NAME="brain-backend"

            echo "==== DEPLOY INICIADO ===="

            if [ ! -d "$PROJECT_PATH" ]; then
              mkdir -p /home/ubuntu
              cd /home/ubuntu
              git clone https://github.com/UnicornIn/brain.git brain
            fi

            cd $PROJECT_PATH

            git fetch origin
            if git show-ref --verify --quiet refs/remotes/origin/staging; then
              git checkout staging
              git reset --hard origin/staging
            else
              echo "❌ La rama 'staging' no existe en remoto. Abortando."
              exit 1
            fi

            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
            echo "MANYCHAT_API_KEY=${{ secrets.MANYCHAT_API_KEY }}" >> .env
            echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "OPENAI_KNOWLEDGE_AGENT_ID=${{ secrets.OPENAI_KNOWLEDGE_AGENT_ID }}" >> .env
            echo "OPENAI_CUSTOMER_AGENT_ID=${{ secrets.OPENAI_CUSTOMER_AGENT_ID }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "OPENAI_VECTOR_STORE_ID=${{ secrets.OPENAI_VECTOR_STORE_ID }}" >> .env
            echo "CORREO_REMITENTE=${{ secrets.CORREO_REMITENTE }}" >> .env
            echo "CONTRASENA_APLICACION=${{ secrets.CONTRASENA_APLICACION }}" >> .env

            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            source venv/bin/activate

            pip cache purge || true
            pip install --upgrade pip
            pip install -r requirements.txt --no-cache-dir

            if ! command -v pm2 &> /dev/null; then
              echo "Instalando Node y PM2..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
              sudo npm install -g pm2
            fi

            pm2 stop "$PM2_PROCESS_NAME" || true
            pm2 start run.py --name "$PM2_PROCESS_NAME" --interpreter python3
            pm2 save
            

            sleep 5
            if curl -sk --max-time 10 "$APP_DOMAIN" > /dev/null; then
              echo "✅ La app está corriendo correctamente en $APP_DOMAIN"
            else
              echo "❌ Error: la app no respondió en $APP_DOMAIN"
              pm2 logs "$PM2_PROCESS_NAME" --lines 20
              exit 1
            fi

            echo "==== DEPLOY COMPLETADO ===="
          ENDSSH
